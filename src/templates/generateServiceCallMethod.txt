async (request: {{request}}, callbacks: Record<number, any> & {{callbacks}}) => {
    {{#if queryRequired}}
      let
    {{else}}{{#if paramsRequired}}
      let
    {{else}}
      const
    {{/if}}
    {{/if}} finalURL = '{{url}}';
    {{#if queryRequired}}
      finalURL += `?${Object.entries(request.query).map(([key, value]) => `${key}=${value}`).join('&')}`;
    {{/if}}
    {{#if paramsRequired}}
      Object.entries(request.params).forEach(([key, value]) => {
        finalURL = finalURL.replaceAll(`:${key}`, value);
        finalURL = finalURL.replaceAll(`{${key}}`, value);
      });
    {{/if}}
    if (!adapter) {
      throw new Error(initializeFetcherWarning);
    }
    let response;
    try {
      response = await adapter(finalURL, {{method}}, {{#if bodyRequired}}request.body{{/if}});
    } catch (err: any) {
      response = err.response;
    }
    if (callbacks[response.statusCode]) {
      callbacks[response.statusCode](response.data);
      return;
    }
    if (!callbacks.fallback) {
      throw new Error(unexpectedErrorWarning);
    }
    callbacks.fallback(response.data);
  }