/*
 *       ___
 *    __/_  `.  .-"""-.
 *    \_,` | \-'  /   )`-')
 *      "") `"`    \  ((`"`
 *     ___Y  ,    .'7 /|
 *    (_,___/...-` (_/_/      FETCHER
 *
 *  Yo this file is auto generated, no touchy.
 */

/* eslint-disable max-lines */
/* eslint-disable sort-keys */

export type FetcherService = <
Request extends {body: any, query: any, params: any}, Response
>(
  request: Request & null,
  callbacks: Record<string, (response: Response) => void>
) => any;

export type RequestType<F extends FetcherService> = Parameters<F>[0];
export type RequestBodyType<F extends FetcherService> = RequestType<F> extends null ? null : RequestType<F>['body'];
export type RequestQueryType<F extends FetcherService> = RequestType<F>['query'];
export type RequestParamsType<F extends FetcherService> = RequestType<F>['params'];

export type RequestStatusCodes<F extends FetcherService> = keyof Parameters<F>[1];

export type ResponseType<
  Func extends (argA: any, argB: Record<string, any>) => any,
  StatusCode extends keyof Parameters<Func>[1],
> = Parameters<Parameters<Func>[1][StatusCode]>[0];

export type HTTPMethod = 'get' | 'post' | 'put' | 'patch' | 'update' | 'delete';

export type ServiceCallResponse<Response> = {
  data: Response;
  statusCode: number;
};

export type ServiceCallAdapter = <Response>(
  url: string,
  method: HTTPMethod,
  body?: unknown,
) => Promise<ServiceCallResponse<Response>>;

let adapter: ServiceCallAdapter | null = null;

const initializeFetcherWarning =
  'Please initialize Fetcher before attempting to make any network calls';
const unexpectedErrorWarning = 'Unexpected error occurred';

export const {{schema.info.title}}MetaData = {
  {{metaData}}
}

/**
 * @description {{schema.info.description}}
 */
const {{schema.info.title}} = {
  {{networkCalls}}
}

const initializeLib = (newAdapter: ServiceCallAdapter) => {
  adapter = newAdapter;
  return {{schema.info.title}};
}

export default initializeLib;