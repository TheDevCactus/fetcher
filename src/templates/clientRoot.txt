/*
 *       ___
 *    __/_  `.  .-"""-.
 *    \_,` | \-'  /   )`-')
 *      "") `"`    \  ((`"`
 *     ___Y  ,    .'7 /|
 *    (_,___/...-` (_/_/      FETCHER
 *
 *  Yo this file is auto generated, no touchy.
 */

/* eslint-disable max-lines */
/* eslint-disable sort-keys */

type HTTPMethod = 'get' | 'post' | 'put' | 'patch' | 'update' | 'delete';

const generateServiceCall = <
  Request extends {
    body?: Record<string, any>;
    query?: Record<string, any>;
    params?: Record<string, any>;
  } | null,
  Response
>(
  url: string,
  method: HTTPMethod,
  knownStatusCodes: Array<number>
) => {
  return async (request: Request, fetchOptions: any = {}) => {
    let finalURL = url;
    
    if (request?.query) {
      finalURL += `?${Object.entries(request.query)
        .map(([key, value]) => `${key}=${value}`)
        .join("&")}`;
    }

    if (request?.params) {
      Object.entries(request.params).forEach(([key, value]) => {
        finalURL = finalURL.replaceAll(`{${key}}`, value);
      });
    }
    
    const response = await fetch(finalURL, {
      body: request?.body ? JSON.stringify(request.body) : null,
      method: method.toUpperCase(),
      ...fetchOptions,
    });
    if (!knownStatusCodes.includes(response.status)) {
      throw new Error("Unexpected error occurred");
    }
    const result = await response.json();
    return {
      data: result as unknown as Response,
      status: response.status,
      headers: response.headers,
    };
  };
};

/**
 * @description {{schema.info.description}}
 */
const {{schema.info.title}} = {
  {{networkCalls}}
}

export default {{schema.info.title}}