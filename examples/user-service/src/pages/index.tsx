import type { NextPage } from "next";
import Head from "next/head";
import { useState } from "react";
import { UserService } from "../services";
import { ResponseType } from "../services/UserService";
import useUserStore from "../stores/user";

const Home: NextPage = () => {
  const authorized = useUserStore((state) => !!state.accessToken.length);
  if (authorized) {
    return <Authorized />;
  }
  return <Unauthorized />;
};

const Unauthorized = () => {
  const [email, setEmail] = useState("");
  const [emailError, setEmailError] = useState("");

  const [password, setPassword] = useState("");
  const [passwordError, setPasswordError] = useState("");
  const { setTokens } = useUserStore();

  const handleSignIn: React.FormEventHandler<HTMLFormElement> = async (e) => {
    e.preventDefault();
    if (emailError.length || passwordError.length) {
      alert("Please resolve errors");
      return;
    }

    UserService.api.v1.sessions.post(
      {
        body: {
          authentication: {
            type: "password",
            credentials: {
              email,
              password,
            },
          },
        },
      },
      {
        "200": (response) => {
          setTokens({
            accessToken: response.accessToken,
            refreshToken: response.refreshToken,
          });
        },
        "500": (response) => {
          alert(response.code);
        },
        fallback: (response: any) => {
          // This is a place where if the backend schemas were better we could utilize different status call callbacks as well.
          // But the schema does not specify the status codes for these responses so we can do this
          switch (response.code) {
            case "usr.7":
              setPasswordError("Password incorrect");
              return;
            case "usr.6":
              setEmailError("Email not found");
              return;
          }
          alert(response.code);
        },
      }
    );
  };

  return (
    <>
      <Head>
        <title>Fetcher | Boom User Service Example</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="container mx-auto flex min-h-screen flex-col items-center justify-center p-4">
        <div>
          <h3 className="text-center">Login To YES</h3>
          <form onSubmit={handleSignIn} className="flex flex-col p-2">
            <input
              className="m-1 rounded-sm p-2 outline outline-1 outline-slate-600"
              type="text"
              placeholder="email"
              required
              name="email"
              onChange={(e) => {
                setEmailError("");
                setEmail(e.target.value);
              }}
            />
            {emailError.length ? <p>{emailError}</p> : null}
            <input
              className="m-1 rounded-sm p-2 outline outline-1 outline-slate-600"
              type="password"
              placeholder="password"
              required
              name="password"
              onChange={(e) => {
                setPasswordError("");
                setPassword(e.target.value);
              }}
            />
            {passwordError.length ? <p>{passwordError}</p> : null}
            <button className="m-1" type="submit">
              Sign In
            </button>
          </form>
        </div>
      </main>
    </>
  );
};

const Authorized = () => {
  const { logout } = useUserStore();
  const [roles, setRoles] =
    useState<ResponseType<typeof UserService.api.v1.users.roles.get, 200>>();

  const getRoles = () => {
    UserService.api.v1.users.roles.get(null, {
      "200": (response) => {
        setRoles(response.roles);
      },
      "500": (response) => {
        console.error(response);
      },
      fallback: (response) => {
        console.log(response);
      },
    });
  };

  const logRandomName = () => {
    UserService.api.v2.users.get(
      {
        query: {
          count: 10,
        },
      },
      {
        200(response) {
          console.log("!!!", "200", response);
        },
        400(response?) {
          console.log("!!!", "400", response);
        },
        500(response) {
          console.error("!!!", "500", response);
        },
        fallback(response?) {
          console.error("!!!", "fallback", response);
        },
      }
    );
  };

  return (
    <main className="container mx-auto flex min-h-screen flex-col items-center justify-center p-4">
      <h1>Hi mom</h1>
      <button onClick={logout}>Logout</button>
      <button onClick={logRandomName}>Log Random Name</button>
      <button onClick={getRoles}>Get Roles</button>
      {roles?.map((role) => (
        <div
          key={role.id}
          className="m-2 w-96 rounded-md bg-slate-100 p-5 outline outline-1 outline-stone-200"
        >
          <h6>Role: {role.id}</h6>
          <hr className="m-2" />
          <h6>Permissions: </h6>
          <p>{role.default}</p>
          <p>{role.permissions ? role.permissions.join("\n") : ""}</p>
        </div>
      ))}
    </main>
  );
};

export default Home;
