import type { NextPage } from "next";
import Head from "next/head";
import { useRouter } from "next/router";
import { useState } from "react";
import { UserService } from "../services";
import useUserStore from "../stores/user";

const SignIn = () => {
  const [email, setEmail] = useState("");
  const [emailError, setEmailError] = useState("");

  const [password, setPassword] = useState("");
  const [passwordError, setPasswordError] = useState("");
  const { setTokens, setUid } = useUserStore();

  const handleSignIn: React.FormEventHandler<HTMLFormElement> = async (e) => {
    e.preventDefault();
    if (emailError.length || passwordError.length) {
      alert("Please resolve errors");
      return;
    }

    UserService.createSession(
      {
        body: {
          authentication: {
            type: "password",
            credentials: {
              email,
              password,
            },
          },
        },
      },
      {
        "200": (response) => {
          setUid(response.userId);
          setTokens({
            accessToken: response.accessToken,
            refreshToken: response.refreshToken,
          });
        },
        "500": (response) => {
          alert(response.code);
        },
        fallback: (response: any) => {
          // This is a place where if the backend schemas were correct we could utilize different status code callbacks as well.
          switch (response.code) {
            case "usr.7":
              setPasswordError("Password incorrect");
              return;
            case "usr.6":
              setEmailError("Email not found");
              return;
          }
          alert(response.code);
        },
      }
    );
  };

  return (
    <>
      <Head>
        <title>Fetcher | Boom User Service Example</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="container mx-auto flex min-h-screen flex-col items-center justify-center p-4">
        <div className="rounded-md shadow-xl outline outline-1 m-0 p-0">
          <form onSubmit={handleSignIn} className="flex flex-col space-y-5">
            <div className="p-6 flex flex-col space-y-5 pb-2">
              <h3 className="font-bold">Login To YES Dev</h3>
              <input
                className="rounded-sm p-2 outline outline-1 outline-slate-600"
                type="text"
                placeholder="email"
                required
                name="email"
                onChange={(e) => {
                  setEmailError("");
                  setEmail(e.target.value);
                }}
              />
              {emailError.length ? <p className="text-red-500">{emailError}</p> : null}
              <input
                className="rounded-sm p-2 outline outline-1 outline-slate-600"
                type="password"
                placeholder="password"
                required
                name="password"
                onChange={(e) => {
                  setPasswordError("");
                  setPassword(e.target.value);
                }}
              />
              {passwordError.length ? <p className="text-red-500">{passwordError}</p> : null}
            </div>
            <button
              disabled={!!passwordError.length || !!emailError.length}
              className="rounded-b-md bg-green-500 p-2 text-white disabled:bg-slate-200 disabled:text-slate-500 hover:bg-green-400 transition-all"
              type="submit"
            >
              Sign In
            </button>
          </form>
        </div>
      </main>
    </>
  );
};

const Home: NextPage = () => {
  const authorized = useUserStore((state) => !!state.accessToken.length);
  const router = useRouter();

  if (authorized) {
    router.push('/dashboard');
    return null;
  }

  return <SignIn />;
};

export default Home;
