"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ValidOpenApiTypeFormatsForOpenApiType = exports.OpenApiTypeFormat = exports.OpenApiType = void 0;
var OpenApiType;
(function (OpenApiType) {
    OpenApiType["Integer"] = "integer";
    OpenApiType["Number"] = "number";
    OpenApiType["String"] = "string";
    OpenApiType["boolean"] = "boolean";
    OpenApiType["Object"] = "object";
    OpenApiType["Array"] = "array";
})(OpenApiType = exports.OpenApiType || (exports.OpenApiType = {}));
var OpenApiTypeFormat;
(function (OpenApiTypeFormat) {
    OpenApiTypeFormat["Int32"] = "int32";
    OpenApiTypeFormat["Int64"] = "int64";
    OpenApiTypeFormat["Float"] = "float";
    OpenApiTypeFormat["Double"] = "double";
    OpenApiTypeFormat["Password"] = "password";
    OpenApiTypeFormat["Byte"] = "byte";
    OpenApiTypeFormat["Binary"] = "binary";
    OpenApiTypeFormat["Date"] = "date";
    OpenApiTypeFormat["DateTime"] = "date-time";
})(OpenApiTypeFormat = exports.OpenApiTypeFormat || (exports.OpenApiTypeFormat = {}));
exports.ValidOpenApiTypeFormatsForOpenApiType = {
    [OpenApiType.Object]: [],
    [OpenApiType.Array]: [],
    [OpenApiType.boolean]: [],
    [OpenApiType.Integer]: [
        OpenApiTypeFormat.Int32,
        OpenApiTypeFormat.Int64
    ],
    [OpenApiType.Number]: [
        OpenApiTypeFormat.Double,
        OpenApiTypeFormat.Float
    ],
    [OpenApiType.String]: [
        OpenApiTypeFormat.Password,
        OpenApiTypeFormat.Binary,
        OpenApiTypeFormat.Byte,
        OpenApiTypeFormat.Date,
        OpenApiTypeFormat.DateTime,
    ],
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbW9kZWxzL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLElBQVksV0FPWDtBQVBELFdBQVksV0FBVztJQUNyQixrQ0FBbUIsQ0FBQTtJQUNuQixnQ0FBaUIsQ0FBQTtJQUNqQixnQ0FBaUIsQ0FBQTtJQUNqQixrQ0FBbUIsQ0FBQTtJQUNuQixnQ0FBaUIsQ0FBQTtJQUNqQiw4QkFBZSxDQUFBO0FBQ2pCLENBQUMsRUFQVyxXQUFXLEdBQVgsbUJBQVcsS0FBWCxtQkFBVyxRQU90QjtBQUVELElBQVksaUJBVVg7QUFWRCxXQUFZLGlCQUFpQjtJQUMzQixvQ0FBZSxDQUFBO0lBQ2Ysb0NBQWUsQ0FBQTtJQUNmLG9DQUFlLENBQUE7SUFDZixzQ0FBaUIsQ0FBQTtJQUNqQiwwQ0FBcUIsQ0FBQTtJQUNyQixrQ0FBYSxDQUFBO0lBQ2Isc0NBQWlCLENBQUE7SUFDakIsa0NBQWEsQ0FBQTtJQUNiLDJDQUFzQixDQUFBO0FBQ3hCLENBQUMsRUFWVyxpQkFBaUIsR0FBakIseUJBQWlCLEtBQWpCLHlCQUFpQixRQVU1QjtBQUVZLFFBQUEscUNBQXFDLEdBQWtEO0lBQ2xHLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUU7SUFDeEIsQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLEVBQUUsRUFBRTtJQUN2QixDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsRUFBRSxFQUFFO0lBQ3pCLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxFQUFFO1FBQ3JCLGlCQUFpQixDQUFDLEtBQUs7UUFDdkIsaUJBQWlCLENBQUMsS0FBSztLQUN4QjtJQUNELENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxFQUFFO1FBQ3BCLGlCQUFpQixDQUFDLE1BQU07UUFDeEIsaUJBQWlCLENBQUMsS0FBSztLQUN4QjtJQUNELENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxFQUFFO1FBQ3BCLGlCQUFpQixDQUFDLFFBQVE7UUFDMUIsaUJBQWlCLENBQUMsTUFBTTtRQUN4QixpQkFBaUIsQ0FBQyxJQUFJO1FBQ3RCLGlCQUFpQixDQUFDLElBQUk7UUFDdEIsaUJBQWlCLENBQUMsUUFBUTtLQUMzQjtDQUNGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZW51bSBPcGVuQXBpVHlwZSB7XG4gIEludGVnZXIgPSAnaW50ZWdlcicsXG4gIE51bWJlciA9ICdudW1iZXInLFxuICBTdHJpbmcgPSAnc3RyaW5nJyxcbiAgYm9vbGVhbiA9ICdib29sZWFuJyxcbiAgT2JqZWN0ID0gJ29iamVjdCcsXG4gIEFycmF5ID0gJ2FycmF5Jyxcbn1cblxuZXhwb3J0IGVudW0gT3BlbkFwaVR5cGVGb3JtYXQge1xuICBJbnQzMiA9ICdpbnQzMicsXG4gIEludDY0ID0gJ2ludDY0JyxcbiAgRmxvYXQgPSAnZmxvYXQnLFxuICBEb3VibGUgPSAnZG91YmxlJyxcbiAgUGFzc3dvcmQgPSAncGFzc3dvcmQnLFxuICBCeXRlID0gJ2J5dGUnLFxuICBCaW5hcnkgPSAnYmluYXJ5JyxcbiAgRGF0ZSA9ICdkYXRlJyxcbiAgRGF0ZVRpbWUgPSAnZGF0ZS10aW1lJyxcbn1cblxuZXhwb3J0IGNvbnN0IFZhbGlkT3BlbkFwaVR5cGVGb3JtYXRzRm9yT3BlbkFwaVR5cGU6IFJlY29yZDxPcGVuQXBpVHlwZSwgQXJyYXk8T3BlbkFwaVR5cGVGb3JtYXQ+PiA9IHtcbiAgW09wZW5BcGlUeXBlLk9iamVjdF06IFtdLFxuICBbT3BlbkFwaVR5cGUuQXJyYXldOiBbXSxcbiAgW09wZW5BcGlUeXBlLmJvb2xlYW5dOiBbXSxcbiAgW09wZW5BcGlUeXBlLkludGVnZXJdOiBbXG4gICAgT3BlbkFwaVR5cGVGb3JtYXQuSW50MzIsXG4gICAgT3BlbkFwaVR5cGVGb3JtYXQuSW50NjRcbiAgXSxcbiAgW09wZW5BcGlUeXBlLk51bWJlcl06IFtcbiAgICBPcGVuQXBpVHlwZUZvcm1hdC5Eb3VibGUsXG4gICAgT3BlbkFwaVR5cGVGb3JtYXQuRmxvYXRcbiAgXSxcbiAgW09wZW5BcGlUeXBlLlN0cmluZ106IFtcbiAgICBPcGVuQXBpVHlwZUZvcm1hdC5QYXNzd29yZCxcbiAgICBPcGVuQXBpVHlwZUZvcm1hdC5CaW5hcnksXG4gICAgT3BlbkFwaVR5cGVGb3JtYXQuQnl0ZSxcbiAgICBPcGVuQXBpVHlwZUZvcm1hdC5EYXRlLFxuICAgIE9wZW5BcGlUeXBlRm9ybWF0LkRhdGVUaW1lLFxuICBdLFxufTtcblxuZXhwb3J0IGludGVyZmFjZSBPcGVuQVBJQ29udGFjdCB7XG4gIG5hbWU/OiBzdHJpbmc7XG4gIHVybD86IHN0cmluZztcbiAgZW1haWw/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgT3BlbkFQSUxpY2Vuc2Uge1xuICBuYW1lOiBzdHJpbmc7XG4gIHVybD86IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBPcGVuQVBJSW5mbyB7XG4gIHRpdGxlOiBzdHJpbmc7XG4gIHZlcnNpb246IHN0cmluZztcbiAgZGVzY3JpcHRpb24/OiBzdHJpbmc7XG4gIHRlcm1zT2ZTZXJ2aWNlPzogc3RyaW5nO1xuICBjb250YWN0PzogT3BlbkFQSUNvbnRhY3Q7XG4gIGxpY2Vuc2U/OiBPcGVuQVBJTGljZW5zZTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBPcGVuQXBpU2VydmVyVmFyaWFibGUge1xuICBlbnVtPzogQXJyYXk8c3RyaW5nPjtcbiAgZGVmYXVsdDogc3RyaW5nO1xuICBkZXNjcmlwdGlvbj86IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBPcGVuQXBpU2VydmVyIHtcbiAgdXJsOiBzdHJpbmc7XG4gIGRlc2NyaXB0aW9uPzogc3RyaW5nO1xuICB2YXJpYWJsZXM/OiBSZWNvcmQ8c3RyaW5nLCBPcGVuQXBpU2VydmVyVmFyaWFibGU+O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIE9wZW5BcGlQYXJhbWV0ZXIge1xuICBuYW1lOiBzdHJpbmc7XG4gIGluOiAncXVlcnknIHwgJ2hlYWRlcicgfCAncGF0aCcgfCAnY29va2llJztcbiAgZGVzY3JpcHRpb24/OiBzdHJpbmc7XG4gIHJlcXVpcmVkOiBib29sZWFuO1xuICBkZXByZWNhdGVkPzogYm9vbGVhbjtcbiAgYWxsb3dFbXB0eVZhbHVlPzogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBPcGVuQXBpUmVmZXJlbmNlIHtcbiAgJHJlZjogc3RyaW5nO1xuICBkZXNjcmlwdGlvbjogc3RyaW5nO1xuICBzdW1tYXJ5OiBzdHJpbmc7XG59XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZW1wdHktaW50ZXJmYWNlXG5leHBvcnQgaW50ZXJmYWNlIE9wZW5BcGlPcGVyYXRpb24ge31cblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1lbXB0eS1pbnRlcmZhY2VcbmV4cG9ydCBpbnRlcmZhY2UgT3BlbkFwaVRhZyB7XG4gIG5hbWU6IHN0cmluZyxcbiAgZGVzY3JpcHRpb24/OiBzdHJpbmcsXG4gIGV4dGVybmFsRG9jcz86IE9wZW5BcGlFeHRlcm5hbERvY3Ncbn1cblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1lbXB0eS1pbnRlcmZhY2VcbmV4cG9ydCBpbnRlcmZhY2UgT3BlbkFwaVNlY3VyaXR5IHt9XG5cbmV4cG9ydCBpbnRlcmZhY2UgT3BlbkFwaVByb3BlcnR5IHtcbiAgdHlwZTogT3BlbkFwaVR5cGUsXG4gIGZvcm1hdDogT3BlbkFwaVR5cGVGb3JtYXQsXG4gIGV4YW1wbGU6IGFueSxcbiAgZW51bTogQXJyYXk8YW55PlxufVxuXG5leHBvcnQgaW50ZXJmYWNlIE9wZW5BcGlTY2hlbWEge1xuICB0eXBlOiBPcGVuQXBpVHlwZS5PYmplY3QsXG4gIHByb3BlcnRpZXM6IFJlY29yZDxzdHJpbmcsIE9wZW5BcGlQcm9wZXJ0eT5cbn1cblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1lbXB0eS1pbnRlcmZhY2VcbmV4cG9ydCBpbnRlcmZhY2UgT3BlbkFwaUNvbXBvbmVudHMge1xuICBzY2hlbWFzOiBSZWNvcmQ8c3RyaW5nLCBPcGVuQXBpU2NoZW1hPlxufVxuXG5leHBvcnQgaW50ZXJmYWNlIE9wZW5BcGlQYXRoc09iamVjdCB7XG4gIFt4OiBzdHJpbmddOiBPcGVuQXBpUGF0aCB8IE9wZW5BcGlQYXRoc09iamVjdFxufVxuXG5leHBvcnQgaW50ZXJmYWNlIE9wZW5BcGlQYXRoIHtcbiAgJHJlZj86IHN0cmluZztcbiAgc3VtbWFyeT86IHN0cmluZztcbiAgZGVzY3JpcHRpb24/OiBzdHJpbmc7XG4gIHNlcnZlcnM/OiBBcnJheTxPcGVuQXBpU2VydmVyPjtcbiAgcGFyYW1ldGVycz86IEFycmF5PE9wZW5BcGlQYXJhbWV0ZXIgfCBPcGVuQXBpUmVmZXJlbmNlPjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBPcGVuQXBpRXh0ZXJuYWxEb2NzIHtcbiAgZGVzY3JpcHRpb246IHN0cmluZyxcbiAgdXJsOiBzdHJpbmdcbn1cblxuZXhwb3J0IGludGVyZmFjZSBPcGVuQVBJU3BlYyB7XG4gIG9wZW5hcGk6IHN0cmluZztcbiAgaW5mbzogT3BlbkFQSUluZm87XG4gIHNlcnZlcnM/OiBBcnJheTxPcGVuQXBpU2VydmVyPjtcbiAgcGF0aHM6IFJlY29yZDxzdHJpbmcsIE9wZW5BcGlQYXRoc09iamVjdD47XG4gIGNvbXBvbmVudHM/OiBPcGVuQXBpQ29tcG9uZW50cztcbiAgc2VjdXJpdHk/OiBBcnJheTxPcGVuQXBpU2VjdXJpdHk+O1xuICB0YWdzPzogQXJyYXk8T3BlbkFwaVRhZz47XG4gIGV4dGVybmFsRG9jcz86IE9wZW5BcGlFeHRlcm5hbERvY3M7XG59XG4iXX0=